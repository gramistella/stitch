import { VerticalBox, HorizontalBox, Button, LineEdit, CheckBox, ScrollView, TextEdit, ListView, Palette, ComboBox} from "std-widgets.slint";
import "./assets/JetBrainsMono-Regular.ttf";

export struct Row {
    path: string,
    name: string,
    level: int,
    is_dir: bool,
    expanded: bool,
    checked: bool,
    has_children: bool,
}

component LabeledEdit inherits VerticalBox {
    in property <string> label;
    in-out property <string> value;

    // Exact layout controls
    in property <length> gap: 12px;            // exact label ↔ input distance
    in property <length> label-height: 16px;  // fixed label box height for consistency
    in property <length> input-height: 30px;  // consistent input height

    callback changed();

    // No automatic spacing; we insert our own explicit spacer
    spacing: 0px;
    padding: 0px;

    Text {
        text: root.label;
        font-size: 12px;
        width: parent.width;
        height: root.label-height;      // fixes variability from implicit line leading
        horizontal-alignment: left;
        vertical-alignment: bottom;     // seat the text at the bottom of its box
        overflow: elide;
    }

    // The only gap between label and input — exactly root.gap
    Rectangle {
        width: 1px;
        height: root.gap;
        background: transparent;
    }

    LineEdit {
        height: root.input-height;
        width: parent.width;
        text <=> root.value;
        changed text => { root.changed(); }
    }
}


export component SelectFromTextDialog inherits Window {
    width: 520px;
    height: 420px;
    title: "Select from Text";
    default-font-family: "JetBrains Mono";
    icon: @image-url("assets/icon.png");

    in-out property <string> text;
    callback apply(text: string);
    callback cancel();

    VerticalBox {
        spacing: 8px;
        padding: 10px;

        Text { text: "Paste hierarchy text below (first line must be the root folder):"; }

        TextEdit {
            text <=> root.text;
            wrap: word-wrap;
            vertical-stretch: 1;
        }

        HorizontalBox {
            spacing: 8px;
            Rectangle { horizontal-stretch: 1; background: transparent; }
            Button { text: "Apply";  clicked => { root.apply(root.text); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

export component SaveProfileDialog inherits Window {
    width: 380px;
    height: 160px;
    title: "Save Profile As";
    default-font-family: "JetBrains Mono";
    icon: @image-url("assets/icon.png");

    in-out property <string> name;
    in-out property <bool> is-local; // true = private/local, false = shared
    callback apply(name: string, is_local: bool);
    callback cancel();

    VerticalBox {
        spacing: 8px;
        padding: 10px;

        LabeledEdit {
            label: "Profile name:";
            value <=> root.name;
        }

        CheckBox {
            text: "Private / Local (not in VCS)";
            checked <=> root.is-local;
        }

        HorizontalBox {
            spacing: 8px;
            Rectangle { horizontal-stretch: 1; background: transparent; }
            Button { text: "Save";  clicked => { root.apply(root.name, root.is-local); } }
            Button { text: "Cancel"; clicked => { root.cancel(); } }
        }
    }
}

component TopBar inherits HorizontalBox {
    in-out property <bool> hierarchy-only;
    in-out property <bool> dirs-only;
    in property <string> last-refresh;
    in property <bool> show-copy-toast;
    in property <string> copy-toast-text;

    callback select-folder();
    callback new-window();
    callback generate-output();
    callback copy-output();

    spacing: 8px;

    Rectangle { 
        horizontal-stretch: 1;
        width: 180px;
        Button {
            horizontal-stretch: 1;
            text: "Select Folder";
            width: 110px;
            height: 30px;
            clicked => { root.select-folder(); }
        }
    }

    Button {
        text: "New Window";
        clicked => { root.new-window(); }
    }

    Rectangle { horizontal-stretch: 1; background: transparent; }

    CheckBox { text: "Hierarchy Only";  checked <=> root.hierarchy-only;  height: 30px; width: 150px;  horizontal-stretch: 1; toggled => { root.generate-output(); }}
    CheckBox { text: "Directories Only"; checked <=> root.dirs-only;      height: 30px; width: 160px;  horizontal-stretch: 1; toggled => { root.generate-output(); }}

    Rectangle {
        horizontal-stretch: 1;
        width: 290px;
        height: 30px;
        background: transparent;
        Text {
            width: parent.width;
            height: parent.height;
            text: root.last-refresh;
            horizontal-alignment: right;
            vertical-alignment: center;
            overflow: elide;
        }
    }

    Button {
        text: "Force Refresh";
        clicked => { root.generate-output(); }
    }

    Button {
        text: "Copy Output";
        clicked => { root.copy-output(); }
    }

    Text {
        visible: root.show-copy-toast;
        text: root.copy-toast-text;
        color: #2b8a3e;
        font-weight: 10;
    }
}

component ProfilesPanel inherits VerticalBox {
    // Profile state
    in-out property <[string]> profiles;
    in-out property <int> selected-profile-index;
    in-out property <string> profile-name;
    in-out property <bool> save-enabled;

    // Filter fields
    in-out property <string> ext-filter;
    in-out property <string> exclude-dirs;
    in-out property <string> exclude-files;
    in-out property <string> remove-prefix;
    in-out property <string> remove-regex;

    // Notifications upward
    callback select-profile(index: int);
    callback save-profile();
    callback save-profile-as();
    callback delete-profile();
    callback profile-name-changed();
    callback filter-changed();
    callback discard-changes();

    width: 370px;

    // Profiles row
    HorizontalBox {
        spacing: 8px;
        padding: 0px;

        if (root.selected-profile-index >= 0) : ComboBox {
            width: 180px;
            height: 30px;
            current-index <=> root.selected-profile-index;
            model: root.profiles;
            selected => {
                root.select-profile(root.selected-profile-index);
            }
        }

        if (root.selected-profile-index >= 0) : Button {
            text: "Save As…";
            height: 30px;
            clicked => { root.save-profile-as(); }
        }

        if (root.selected-profile-index > 0) : Button {
            visible: root.selected-profile-index > 0;
            text: "Delete";
            height: 30px;
            clicked => { root.delete-profile(); }
        }
    }

    HorizontalBox {
        spacing: 8px;
        padding: 0px;

        if (root.selected-profile-index >= 0) : Button {
            enabled: root.save-enabled;
            text:  (root.selected-profile-index > 0) ? "Save" : "Save Workspace Settings";
            height: 30px;
            clicked => { root.save-profile(); }
        }

        if (root.selected-profile-index >= 0 && root.save-enabled) : Button {
            text: "Discard Changes";
            height: 30px;
            clicked => { root.discard-changes(); }
        }
    }


    // Filters (and Profile Name) as a scrollable list
    Rectangle {
        border-width: 0px;
        horizontal-stretch: 1;
        vertical-stretch: 1;
        background: transparent;

        // clipping belongs on a Rectangle (not on ScrollView)
        clip: true;

        // Fill the clipping container
        ScrollView {
            width: parent.width;
            height: parent.height;

            // Viewport content must match the scroll area width exactly
            viewport := VerticalBox {
                spacing: 8px;
                padding: 0px;                 // remove default insets
                width: parent.width - 5px;     // lock to ScrollView width

                if (root.selected-profile-index > 0) : LabeledEdit {
                    width: parent.width;                 // match viewport width exactly
                    label: "Profile name:";
                    value <=> root.profile-name;
                    changed => { root.profile-name-changed(); }
                }

                if (root.selected-profile-index > 0) : Rectangle {
                    width: parent.width;
                    height: 30px;
                }

                LabeledEdit {
                    width: parent.width;
                    label: "Filter Extensions (e.g., .py,.txt or '-.rs')";
                    value <=> root.ext-filter;
                    changed => { root.filter-changed(); }
                }

                LabeledEdit {
                    width: parent.width;
                    label: "Exclude Directories (e.g., target,node_modules):";
                    value <=> root.exclude-dirs;
                    changed => { root.filter-changed(); }
                }

                LabeledEdit {
                    width: parent.width;
                    label: "Exclude Files (e.g., LICENSE):";
                    value <=> root.exclude-files;
                    changed => { root.filter-changed(); }
                }

                LabeledEdit {
                    width: parent.width;
                    label: "Remove lines starting with:";
                    value <=> root.remove-prefix;
                    changed => { root.filter-changed(); }
                }

                LabeledEdit {
                    width: parent.width;
                    label: "Remove regex:";
                    value <=> root.remove-regex;
                    changed => { root.filter-changed(); }
                }
            }
        }
    }
}

component TreePanel inherits VerticalBox {
    in-out property <[Row]> tree-model;

    callback select-from-text();
    callback toggle-expand(index: int);
    callback toggle-check(index: int);

    horizontal-stretch: 1;

    Button {
        text: "Select from Text...";
        clicked => { root.select-from-text(); }
    }

    Rectangle {
        horizontal-stretch: 1;
        border-width: 1px;
        border-radius: 4px;
        border-color: Palette.border;
        background: Palette.alternate-background.darker(0.06);

        ScrollView {
            viewport1 := VerticalBox {
                spacing: 0px;
                padding: 0px;
                padding-bottom: 15px;

                for row[i] in root.tree-model : HorizontalBox {
                    spacing: 8px;
                    height: 35px;

                    Rectangle { width: max(0px, row.level * 16px); height: 1px; background: transparent; }

                    Rectangle {
                        width: 18px; height: parent.height; background: transparent;
                        TouchArea {
                            clicked => { if (row.is_dir && row.has_children) { root.toggle-expand(i); } }
                            Text {
                                font-size: 21px;
                                vertical-alignment: center;
                                horizontal-alignment: center;
                                text: row.is_dir ? (row.has_children ? (row.expanded ? "▾" : "▸") : "·") : " ";
                            }
                        }
                    }

                    CheckBox {
                        height: parent.height;
                        checked: row.checked;
                        toggled => { root.toggle-check(i); }
                    }

                    Text { 
                        height: parent.height;
                        vertical-alignment: center;
                        text: row.name;
                    }
                }
            }
        }
    }
}

component OutputPanel inherits VerticalBox {
    in-out property <string> output-text;
    in property <string> output-stats;

    padding-top: 24px;
    spacing: 6px;

    Text { text: "Output: " + root.output-stats; }

    Rectangle {
        border-width: 1px;
        border-radius: 4px;
        clip: true;
        horizontal-stretch: 1;
        vertical-stretch: 1;
        border-color: Palette.border;
        background: Palette.alternate-background.darker(0.06); 

        TextEdit {
            text <=> root.output-text;
            read-only: true;
            wrap: no-wrap;
            x: 0; y: 0;
            width: parent.width;
            height: parent.height;
            has-focus: false;
            font-size: 11px;
        }
    }
}

export component AppWindow inherits Window {
    width: 1300px;
    height: 650px;

    default-font-family: "JetBrains Mono";
    icon: @image-url("assets/icon.png");

    in-out property <string> app-version;
    in-out property <string> project-path;

    title: "Stitch v" + root.app-version
         + (root.project-path != "" ? " (" + root.project-path + ")" : "");

    in-out property <[Row]> tree-model;
    in-out property <string> ext-filter;
    in-out property <string> exclude-dirs;
    in-out property <string> exclude-files;
    in-out property <string> remove-prefix;
    in-out property <string> remove-regex;
    in-out property <bool> hierarchy-only;
    in-out property <bool> dirs-only;
    in-out property <string> last-refresh;
    in-out property <string> output-text;
    in-out property <[string]> output-lines;
    in-out property <string> output-stats;

    in-out property <[string]> profiles;
    in-out property <int> selected-profile-index;

    in-out property <string> profile-name;
    in-out property <bool> save-enabled;

    in-out property <bool> show-copy-toast;
    in-out property <string> copy-toast-text;

    callback select-folder();
    callback filter-changed();
    callback toggle-expand(index: int);
    callback toggle-check(index: int);
    callback generate-output();
    callback copy-output();
    callback select-from-text();
    callback new-window();

    callback select-profile(index: int);
    callback save-profile();
    callback save-profile-as();

    // rename/delete hooks
    callback profile-name-changed();
    callback delete-profile();
    callback discard-changes();

    VerticalBox {
        spacing: 10px;

        // Top bar
        TopBar {
            hierarchy-only <=> root.hierarchy-only;
            dirs-only <=> root.dirs-only;
            last-refresh: root.last-refresh;
            show-copy-toast: root.show-copy-toast;
            copy-toast-text: root.copy-toast-text;

            select-folder => { root.select-folder(); }
            new-window => { root.new-window(); }
            generate-output => { root.generate-output(); }
            copy-output => { root.copy-output(); }
        }

        // Main content row
        HorizontalBox {
            // LEFT: Profiles & Filters
            ProfilesPanel {
                profiles <=> root.profiles;
                selected-profile-index <=> root.selected-profile-index;

                profile-name <=> root.profile-name;
                save-enabled <=> root.save-enabled;

                ext-filter <=> root.ext-filter;
                exclude-dirs <=> root.exclude-dirs;
                exclude-files <=> root.exclude-files;
                remove-prefix <=> root.remove-prefix;
                remove-regex <=> root.remove-regex;

                select-profile(index) => { root.select-profile(index); }
                save-profile => { root.save-profile(); }
                save-profile-as => { root.save-profile-as(); }
                delete-profile => { root.delete-profile(); }
                profile-name-changed => { root.profile-name-changed(); }
                filter-changed => { root.filter-changed(); }
                discard-changes => { root.discard-changes(); }
            }

            // MIDDLE: Tree
            TreePanel {
                horizontal-stretch: 1;
                tree-model <=> root.tree-model;

                select-from-text => { root.select-from-text(); }
                toggle-expand(index) => { root.toggle-expand(index); }
                toggle-check(index) => { root.toggle-check(index); }
            }

            // RIGHT: Output
            OutputPanel {
                horizontal-stretch: 2;
                output-text <=> root.output-text;
                output-stats: root.output-stats;
            }
        }
    }
}
